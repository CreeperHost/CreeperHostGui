buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}
apply plugin: 'net.minecraftforge.gradle'

ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mc_version + "-" +  config.mod_version}"
if (hasProperty('appendBuildNumber')) {
    version = version + "-" + appendBuildNumber.toString()
}

group = 'net.creeperhost'
archivesBaseName = 'minetogether'

minecraft {
    mappings channel: 'snapshot', version: '20200210-1.15.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "examplemod",
                "Specification-Vendor": "examplemodsareus",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.15.2-31.1.35'

    compile 'org.kitteh.irc:client-lib:7.2.2'
    compile 'net.engio:mbassador:1.3.1'
}

shadowJar {
    // Only shadow fluent-hc
    dependencies {
        include(dependency('org.kitteh.irc:client-lib:7.2.2'))
        include(dependency('net.engio:mbassador:1.3.1'))
    }

    // Relocate fluent-hc to prevent conflicts with other mods that include it
    relocate 'org.kitteh.irc', 'net.creeperhost.minetogether.org.kitteh.irc'
    relocate 'net.engio.mbassy', 'net.creeperhost.minetogether.net.engio.mbassy'

    classifier '' // Replace the default JAR
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}

